# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        
        if not root1 and root2:
            return root2
        
        def dfs(root1, root2):
            if root1 and root2:
                root1.val += root2.val
                dfs(root1.left, root2.left)
                if root1.left == None and root2.left != None:
                    root1.left = root2.left
                dfs(root1.right, root2.right)    
                if root1.right == None and root2.right != None:
                    root1.right = root2.right
        
        dfs(root1, root2)
        return root1

Algo1 Repeat

class Solution(object):
    def mergeTrees(self, t1, t2):
        if t1 and t2:
            root = TreeNode(t1.val + t2.val)
            root.left = self.mergeTrees(t1.left, t2.left)
            root.right = self.mergeTrees(t1.right, t2.right)
            return root
        else:
            return t1 or t2
