# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        count = 0
        temp = head
        
        while temp != None:
            temp = temp.next
            count += 1
        
        for _ in range(count//2):
            head = head.next
        return head


try for a more optimized solution âœ…
(updated version)
Algorithm1 repeat


class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        slow, fast = head, head
        
        while fast and fast.next:    # check fast.next for odd and fast for even linked list
            slow = slow.next
            fast = fast.next.next
        
        return slow                  # when fast will be at end the slow pointer will be at middle position
