class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k = k % len(nums)
        res = nums[len(nums) - k:] + nums[: len(nums) - k]
        for i in range(len(res)):
            nums[i] = res[i]
            
           
try to do it with O(1) space complexity ✅
also try different approaches✅

O(1):

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        x = k % len(nums)
        
        def rev(s, e):
            while s < e:
                nums[s], nums[e] = nums[e], nums[s]
                s += 1
                e -= 1
            
        nums.reverse()
        rev(0, x - 1)
        rev(x, len(nums) - 1)


Another approach:

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        l = len(nums)
        x = k % l
        nums[-x:], nums[:0] = nums[:0], nums[-x:]

