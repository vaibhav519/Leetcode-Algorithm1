class Solution:
    def maxAreaOfIsland(self, grid):
        m = []
        h = len(grid)
        w = len(grid[0])

        def dfs(p, q, count=0):
            if 0 <= p < h and 0 <= q < w and grid[p][q] == 1:
                count += 1
                grid[p][q] = 0
                dfs(p + 1, q, count)
                dfs(p - 1, q, count)
                dfs(p, q + 1, count)
                dfs(p, q - 1, count)

            return count

        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == 1:
                    rc = dfs(i, j)
                    m.append(rc)

        return max(m)


grid = [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
        [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0],
        [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]
a = Solution()
print(a.maxAreaOfIsland(grid))

complete the above code ✅


class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        
        h = len(grid)
        w = len(grid[0])
        
        def dfs(p, q):
            if 0 <= p < h and 0 <= q < w and grid[p][q] == 1:
                grid[p][q] = 0
                return 1 + dfs(p + 1, q) + dfs(p - 1, q) + dfs(p, q + 1) + dfs(p, q - 1)
            else:
                return 0

        output = 0        
        for i in range(h):
            for j in range(w):
                if grid[i][j] == 1:
                    output = max(output, dfs(i,j)) 
                    
        return output
        
analyze the code a bit more focusing on the recursion part ✅
