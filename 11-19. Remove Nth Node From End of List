# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        t = head
        h = head
        
        if head.next == None:
            return None
        
        if n == 1:
            
            while n:
                h = h.next
                n -= 1

            while h and h.next:
                h = h.next
                t = t.next

            t.next = h.next
        
            return head
        
        while n:
            h = h.next
            n -= 1
        
        if h == None:
            return head.next
        
        else:
            
            while h and h.next:
                h = h.next
                t = t.next

            t.next = t.next.next
        
            return head
            
A more optimized solution
Algorithm1 repeat

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        fast = slow = head
        
        while n:                      # moving the fast pointer to n nodes ahead
            fast = fast.next          # so that the gap between slow and fast = n
            n -= 1
        
        if not fast:                  # if n = length of linked list
            return head.next
        
        while fast.next:
            fast = fast.next
            slow = slow.next
            
        slow.next = slow.next.next    # removing the given node
        
        return head
